const gridDom = document.getElementById("gridContainer");
const playBtn = document.getElementById("playBtn");
let blacklistNumber = [];

playBtn.addEventListener('click', function() {
    // get the value of the selected level option
    const selectedLevel = document.getElementById("yourlevel").value;
    // clear the existing squares
    gridDom.innerHTML = '';
    // reset the blacklist array
    blacklistNumber = [];

    // randomly select 16 unique numbers to be bombs
    const bombIndices = [];
    while (bombIndices.length < 16) {
    const randomNumber = uniqueRandomNumber(blacklistNumber, 1, selectedLevel);
    if (!bombIndices.includes(randomNumber)) {
        bombIndices.push(randomNumber);
    }
    }

    // create squares based on selected level
    for (let i = 0; i < selectedLevel; i++) {
    // generate a new valid number for the current square
    const newValidNumber = uniqueRandomNumber(blacklistNumber, 1, selectedLevel);
    // add the new valid number to the blacklist array
    blacklistNumber.push(newValidNumber);

    // create a new square with the valid number and selected level
    const currentSquare = newSquare(newValidNumber, selectedLevel, bombIndices);
    currentSquare.addEventListener('click', function() {
        // toggle the 'clicked' class of the current square when clicked
        this.classList.toggle('clicked');
    
        // check if the current square contains the bomb class
        if (this.classList.contains('bomb')) {
            // change the background color of all squares with the bomb class to red
            const bombs = document.querySelectorAll('.bomb');
            for (let i = 0; i < bombs.length; i++) {
                bombs[i].style.backgroundColor = 'red';
            }
        }
    });

    // add the current square to the grid container
    gridDom.append(currentSquare);
    }
});


// create a new square element with a given number and level
function newSquare(number, level, bombIndices) {
    const squareElement = document.createElement('div');
    squareElement.classList.add('square');
    squareElement.classList.add(`square-${level}`);

    squareElement.innerHTML  = number;

    if (bombIndices.includes(number)) {
    squareElement.classList.add('bomb');
    }

    return squareElement;
}
  

// generate a new unique random number within a given range
// and excluding numbers in the blacklist array
function uniqueRandomNumber(blacklist, min, level) {
    let validNumber = false;
    let randomNumber;

// determine the maximum number based on the selected level
// i've seen i can re-write in this way: "const maxNumber = level === "100" ? 100 : level === "81" ? 81 : 49;"
//BUT ASK TO SIMONE
    let maxNumber;
    if (level === "100") {
    maxNumber = 100;
    } else if (level === "81") {
    maxNumber = 81;
    } else {
    maxNumber = 49;
    };

    // continue generating random numbers until a valid one is found
    while (!validNumber) {
        randomNumber = randomNumberGenerator(min, maxNumber);
        if (!blacklist.includes(randomNumber)) {
            validNumber = true;
        }
    }

    return randomNumber;
}

// generate a random integer within a given range
function randomNumberGenerator(min, max) {
    const number = Math.floor(Math.random() * (max - min + 1)) + min;
    return number;
}


/* 
"const maxNumber = level === "100" ? 100 : level === "81" ? 81 : 49;"
This line of code is a ternary operator that assigns a value to the maxNumber variable based on the value of the level parameter.
If level is equal to "100", return 100. Otherwise, if level is equal to "81", return 81. Otherwise, return 49."

The ? symbol separates the different parts of the conditional operator:

The part before the first ? is the condition that is being tested (level === "100" in this case).

The part between the first ? and the second : is the value that is returned if the condition is true (100 in this case).

The part after the second : is the value that is returned if the condition is false (level === "81" ? 81 : 49 in this case).

Note that the conditional operator is often used as a shorthand way to write simple if...else statements, and can make code shorter and more concise. However, it can also make code harder to read and understand if used excessively or in complex ways.

It first checks if level is equal to "100" using the === operator. If it is true, then maxNumber is assigned the value of 100. If it is false, it moves on to the next condition, which checks if level is equal to "81". If it is true, then maxNumber is assigned the value of 81. If it is false, it moves on to the last condition, which assigns the value of 49 to maxNumber if none of the previous conditions were true.

In summary, this line of code sets the maximum number that can be generated by the uniqueRandomNumber function based on the selected level (100 for easy, 81 for medium, and 49 for hard). 

LOOK -> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator
*/
